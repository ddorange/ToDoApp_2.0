(function(){    'use strict';    var    // Model    AppModel = Backbone.Model.extend({        defaults: {            state: ''        },        STATE: {            LIST: 'list',            DETAIL: 'detail'        },        initialize: function(){        },        beList: function(){            console.log('state is list');            this.set('state', this.STATE.LIST);            // this.changeState = this.beDetail;        },        beDetail: function(){            console.log('state is detail');            this.set('state', this.STATE.DETAIL);            // this.changeState = this.beList;        }    }),    NoteModel = Backbone.Model.extend({        defaults: {            title: '',            content: ''        },        initialize: function(){            this.on('invalid', function(model, error){                alert(error);            });        },        validate: function(attrs){            if ( _.isEmpty(attrs.title) ) {                return 'Opps! Title is Empty!';            }            if ( _.isEmpty(attrs.content) ) {                return 'Opps! Content is Empty!';            }        }    }),    // Collection    NoteCollection = Backbone.Collection.extend({        model: NoteModel,        localStorage: new Backbone.LocalStorage('App')    }),    // View    AppView = Backbone.View.extend({        el: '#js-app',        CLAS: {            LIST: 'menu__list',            DETAIL: 'menu__detail'        },        events: {            'click .btn--add':    'handleAddBtn',            'click .btn--return': 'handleBackBtn'        },        initialize: function() {            this.$menu = this.$('#js-menu_view');            this.listenTo(this.model, 'change:state', this.render);        },        render: function() {            var state = this.model.get('state');            if (state === 'list') {                this.$menu.removeClass(this.CLAS.DETAIL);                this.$menu.addClass(this.CLAS.LIST);            } else {                this.$menu.removeClass(this.CLAS.LIST);                this.$menu.addClass(this.CLAS.DETAIL);            }                        return this;        },        handleAddBtn: function(){            Backbone.history.navigate('detail/new', {trigger: true});        },        handleBackBtn: function(){            Backbone.history.navigate('', {trigger: true});        }    }),    ListView = Backbone.View.extend({        el: '#js-list_view',        initialize: function(){            this.listenTo(this.collection, 'add', this.addOne);            this.listenTo(this.collection, 'reset', this.addAll);            this.listenTo(this.collection, 'remove', this.removeOne);            this.listenTo(this.collection, 'SHOW_LIST', this.render);            this.listenTo(this.collection, 'ADD_NEW_NOTE', this.hide);            this.listenTo(this.collection, 'OPEN_NOTE', this.hide);                                    this.collection.fetch();            this.render();        },        render: function() {            var fragmet = document.createDocumentFragment();            this.collection.each( function (_model) {                var noteView = new NoteView( {model: _model} );                fragmet.appendChild( noteView.render().el );            }, this);            this.el.appendChild(fragmet);            return this;        },        hide: function(){            this.$el.hide();        },        addOne: function(){},        addAll: function(){},        removeOne: function(){}    }),    NoteView = Backbone.View.extend({        tagName: 'li',        className: 'list__item',        template: _.template( $('#tmp-note').html() ),        events: {            'click': 'showDetail'        },        initialize: function() {            this.model.on('destroy', this.remove, this);            this.model.on('change', this.render, this);        },        render: function() {            var template = this.template( this.model.toJSON() );            this.$el.html(template);            return this;        },        showDetail: function(){            Backbone.history.navigate('detail/' + this.model.get('cid'), {trigger: true});        },        remove: function() {            this.$el.remove();        }    }),    DetailView = Backbone.View.extend({        el: '#js-detail_view',        title: '',        content: '',        initialize: function() {            this.$title = this.$('#js-detail_title');            this.$content = this.$('#js-detail_body');            this.listenTo(this.collection, 'ADD_NEW_NOTE', this.addNew);            this.listenTo(this.collection, 'OPEN_NOTE', this.openNote);            this.listenTo(this.collection, 'SHOW_LIST', this.hide);        },        render: function(){            this.$title.val(this.title);            this.$content.val = (this.content);            this.$el.show();            return this;        },        hide: function(){            this.$el.hide();        },        addNew: function() {            console.log('addNew');            // this.collection.create();            this.render();        },        openNote: function(cid){            var model = this.collection.get(cid);            this.render();        },        destroy: function(){            console.log('DetailView_destroy');        },        back: function() {            var title = this.$el.find('#js-detail_title').val(),                body  = this.$el.find('#js-detail_body').val();            if ( this.model.set({title: title, body: body}, {validate: true}) ) {                this.$el.empty();            }        }    }),    AppRouter = Backbone.Router.extend({        routes: {            '': 'setList',            'detail/:id': 'setDetail'        },        initialize: function() {            this.model = app.state;        },        setList: function(){            this.model.beList();            app.notes.trigger('SHOW_LIST');        },        setDetail: function(id){            this.model.beDetail();            if(id === 'new'){                app.notes.trigger('ADD_NEW_NOTE');            } else {                app.notes.trigger('OPEN_NOTE', id);            }        }    });    // インスタンスの作成    var app = {};    app.state = new AppModel();    app.router = new AppRouter();    app.notes = new NoteCollection();    app.mainView = new AppView({ model: app.state });    app.listView = new ListView({ collection: app.notes });    app.detailView = new DetailView({ collection: app.notes });        window.app = app;    Backbone.history.start();})();